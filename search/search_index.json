{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome!","text":"<p>Welcome to the XAI Demonstrator's technical documentation.</p> <p>You've come to the right place if you want to...</p> <ul> <li>... learn about the technical design and architecture of the XAI demonstrator</li> <li>... adapt the XAI Demonstrator to your needs or contribute additional use cases</li> <li>... set up your own deployment</li> </ul>"},{"location":"common/backend-utils/","title":"XAI Demonstrator backend utilities","text":"<p>Python package that provides shared functionality for XAI Demonstrator backend microservices.</p>"},{"location":"common/backend-utils/#modules","title":"Modules","text":"<ul> <li><code>xaidemo.routers</code>: FastAPI routers</li> <li><code>xaidemo.tracing</code>: OpenTelemetry tracing instrumentation and configuration</li> <li><code>xaidemo.http_client</code>: <code>aiohttp</code> based async HTTP client</li> <li><code>xaidemo.tracking</code>: Utilities for recording data during experiments with users</li> </ul>"},{"location":"common/backend-utils/xaidemo/tracking/","title":"Client-side experiment tracking","text":"<p>Record data during experiments.</p>"},{"location":"common/backend-utils/xaidemo/tracking/#example","title":"Example","text":"<p>Use <code>tracking.set_up()</code> to instrument an XAI Demonstrator service:</p> <p><pre><code>from fastapi import FastAPI\nfrom xaidemo import tracing, tracking\n# Experiment tracking builds on OpenTelemetry,\n# so don't forget to set up tracing\ntracing.set_up()  \napp = FastAPI()\ntracking.instrument(app)\n@app.post(\"/predict\")\ndef predict(text: str):\ntracking.record_data(key=\"input\", value={\"text\": text, \"length\": len(text)})\n...\ntracing.instrument(app)\n</code></pre> You will find this data within the record under <code>data[key]</code> along with some metadata.</p> <p>Note that <code>EXPERIMENT=1</code> needs to be set at start time, otherwise no data will be recorded.</p> <p>Note that each <code>key</code> can only used once within a record and the key <code>\"tracked\"</code> is  already used for the <code>experiment-proxy</code> data. In other words: Make sure to use a different <code>key</code> for each call to <code>record_data</code> you make within your use case and that a single external request to your use case does not execute the same <code>record_data</code> call more than once.</p>"},{"location":"common/backend-utils/xaidemo/tracking/#see-also","title":"See also","text":"<p>For the full documentation of the experiment tracking capabilities, see here.</p>"},{"location":"common/vue-components/","title":"XAI Demonstrator VueJS component library","text":"<p>Common frontend elements.</p> <p>Published as @xai-demonstrator/xaidemo-ui.</p>"},{"location":"common/vue-components/xaidemo-ui/","title":"xaidemo-ui","text":"<p>VueJS component library for the XAI Demonstrator.</p>"},{"location":"common/vue-components/xaidemo-ui/#compiles-and-minifies-for-production","title":"Compiles and minifies for production","text":"<pre><code>npm run build:lib\n</code></pre>"},{"location":"docs/about/","title":"About","text":"<p>The XAI Demonstrator is a modular platform that lets users interact with production-grade Explainable AI (XAI) systems. It is developed by a team associated with the Institute of Business Analytics at the University of Ulm.</p> <p></p>"},{"location":"docs/about/#team","title":"Team","text":"<ul> <li>Julia Brasse</li> <li>Hanna Broder</li> <li>Maximilian F\u00f6rster</li> <li>Philipp H\u00fchn</li> <li>Kilian Kluge</li> <li>Lars Mostue</li> <li>Matthias Nase</li> <li>Mike Rothenh\u00e4usler</li> <li>Isabel Sch\u00f6berl</li> <li>Philipp Schr\u00f6ppel</li> <li>Irina Sigler</li> <li>Theresa Tr\u00f6ger</li> <li>Marie Walter</li> <li>Dennis Winter</li> </ul>"},{"location":"docs/about/#license","title":"License","text":"<p>The XAI Demonstrator is licensed under the terms of the Apache 2.0 license.</p> <p>See the LICENSE file for details.</p>"},{"location":"docs/about/#funding","title":"Funding","text":"<p>Initial conceptualization, design, and development of the XAI Demonstrator was supported by the P\u00e9ter-Horv\u00e1th-Stiftung.</p>"},{"location":"docs/tech-notes/gcp/","title":"Deploying to Google Cloud Platform","text":""},{"location":"docs/tech-notes/gcp/#why","title":"Why?","text":""},{"location":"docs/tech-notes/gcp/#what-we-ended-up-with","title":"What we ended up with","text":""},{"location":"docs/tech-notes/gcp/#cloud-run","title":"Cloud Run","text":""},{"location":"docs/tech-notes/gcp/#firebase-hosting","title":"Firebase Hosting","text":""},{"location":"docs/tech-notes/gcp/#things-weve-tried","title":"Things we've tried","text":""},{"location":"docs/tech-notes/gcp/#delivering-frontends-via-google-cloud-storage","title":"Delivering frontends via Google Cloud Storage","text":""},{"location":"docs/tech-notes/gcp/#running-on-gpus-with-cloud-run-for-anthos","title":"Running on GPUs with Cloud Run for Anthos","text":""},{"location":"docs/tech-notes/monorepo/","title":"Monorepo","text":""},{"location":"docs/tech-notes/monorepo/#why","title":"Why?","text":""},{"location":"docs/tech-notes/monorepo/#cicd-with-github-actions","title":"CI/CD with GitHub Actions","text":""},{"location":"docs/tech-notes/monorepo/#coverage","title":"Coverage","text":""},{"location":"docs/tech-notes/tech-stack/","title":"Selecting the XAI Demonstrator's Tech Stack","text":""},{"location":"docs/tech-notes/tech-stack/#technical-requirements","title":"Technical requirements","text":""},{"location":"docs/tech-notes/tech-stack/#development-requirements","title":"Development requirements","text":""},{"location":"docs/user-guide/deployment/","title":"Permanent deployment","text":""},{"location":"docs/user-guide/deployment/#what-does-deployment-mean","title":"What does 'deployment' mean?","text":"<p>In the Getting Started chapter of this user guide, you have learned how to spin up an XAI Demonstrator instance.</p> <p>In IT lingo, a 'deployment' is a permanently running instance of an IT system. It comprises both a number of services, their configuration, and the infrastructure on which it runs.</p>"},{"location":"docs/user-guide/deployment/#deploy-a-private-instance-in-a-private-network","title":"Deploy a private instance in a private network","text":"<p>You can use the  test-local configuration as described in  Getting Started.</p> <p>If you want to use your own or modified use cases, there are two options.</p> <p>If have your own container registry, which we recommend, you can fork test-local.</p> <p>If you don't, you will need to build the containers on the target machine.</p> <p>Check out the \"global\" docker-compose.yml and work from there.</p> <p>Ports</p> <p>For others to access your deployment, you need to open the port your server is running at.</p> <p>In the standard configuration, that's port 8000.</p>"},{"location":"docs/user-guide/deployment/#deploy-a-public-instance-on-the-internet","title":"Deploy a public instance on the internet","text":"<p>You probably want to have HTTPS and run on a dedicated server. Never connect your personal computers or internal servers to the internet!</p> <p>We strongly recommend using a dedicated VM instance.</p> <p>Ports</p> <p>For others to access your deployment, you need to open ports 80 and 443.</p>"},{"location":"docs/user-guide/deployment/#deploy-a-production-grade-setup-on-google-cloud-platform","title":"Deploy a production-grade setup on Google Cloud Platform","text":"<p>What is the difference?</p> <p>Costs</p> <p>You need to set spending limits and monitor the costs.</p>"},{"location":"docs/user-guide/deployment/#whats-next","title":"What's next?","text":""},{"location":"docs/user-guide/dev-setup/","title":"Set Up Your Development Environment","text":"<p>The purpose of this short instruction is to set up an environment to clone the repository and run it locally on the users computer. </p> <p>Quick start for advanced developers</p> <p>If you've developed software using (parts of) the XAI Demonstrator's tech stack before, chances are that you already have the required software installed or do not need detailed setup instructions.</p> <p>To write code for the XAI Demonstrator, you need</p> <ul> <li>Git</li> <li>Node.js</li> <li>Python</li> </ul> <p>Then, you can clone github.com/XAI-Demonstrator/xai-demonstrator and are good to go.</p>"},{"location":"docs/user-guide/dev-setup/#tools","title":"Tools","text":"<p>All you need is a text editor and a terminal (under Windows, we recommend you use Git Bash that ships with Git for Windows).</p> <p>The XAI Demonstrator team uses PyCharm Professional, which supports not only Python, but web development as well. It can be downloaded here. (Note that the Community version has only limited support for web development. The Professional version can be obtained for free for students and other educational users.)</p>"},{"location":"docs/user-guide/dev-setup/#get-the-code","title":"Get the code","text":""},{"location":"docs/user-guide/dev-setup/#install-git","title":"Install Git","text":"<p>As is the case for almost all modern software projects, the XAI Demonstrator's code is stored in a Git repository.</p> <p>Prepare your macOS device \ud83c\udf4e</p> <p>If your computer is running macOS, it's easiest to use Homebrew to install Git and the other required software.</p> <p>If Homebrew ist not yet installed, run following command in the command line:  </p> <p><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"</code></p> <ul> <li>macOS: <code>brew install git</code></li> <li>Linux (Debian-based): <code>apt-get install git</code></li> <li>Linux (Arch-based): <code>pacman -S git</code></li> <li>Windows: Download installer from the official website</li> </ul>"},{"location":"docs/user-guide/dev-setup/#clone-the-repository","title":"Clone the repository","text":"<p>Navigate to the directory in which you want to keep the source code and run</p> <pre><code>git clone https://github.com/XAI-Demonstrator/xai-demonstrator.git\n</code></pre>"},{"location":"docs/user-guide/dev-setup/#prepare-for-frontend-development","title":"Prepare for frontend development","text":""},{"location":"docs/user-guide/dev-setup/#install-nodejs","title":"Install Node.js","text":"<p>The XAI Demonstrator's frontends require the Node.js JavaScript runtime version 14.</p> <ul> <li>macOS: <code>brew install node@14</code></li> <li>Windows: Download the installer from the official website</li> </ul> <p>Recommendation: Use a Node.js Version Manager \ud83d\udca1</p> <p>If you frequently work with Node.js or would like to install Node.js cleanly separated from your other software, we recommend you use a version manager such as NVM or NVM for Windows</p>"},{"location":"docs/user-guide/dev-setup/#install-frontend-dependencies","title":"Install frontend dependencies","text":"<p>Navigate to the frontend's directory (e.g., <code>cd visual-inspection/inspection-frontend</code>) and run <code>npm install</code>.</p> <p>To check that everything works as expected, run <code>npm run test:unit</code> to execute the unit test suite.</p> <p>Afterwards, you can launch the frontend development server using <code>npm run serve</code>.</p>"},{"location":"docs/user-guide/dev-setup/#prepare-for-backend-development","title":"Prepare for backend development","text":""},{"location":"docs/user-guide/dev-setup/#install-python","title":"Install Python","text":"<p>The XAI Demonstrator's backends require Python 3.8. We recommend that you set up a dedicated Python environment for your work on the XAI Demonstrator. While the different components and use cases each have their own set of requirements, to date these requirements are compatible.</p> <ul> <li>Linux: We recommend using PyEnv to obtain the correct Python version and set up the virtual environment.</li> <li>macOS and Windows: We recommend using the Anaconda distribution.</li> </ul>"},{"location":"docs/user-guide/dev-setup/#install-backend-dependencies","title":"Install backend dependencies","text":"<p>Make sure your Python environment is activated and navigate to the backend's directory (e.g., <code>cd visual-inspection/inspection-backend</code>).</p> <p>Then, first run <code>pip install -r requirements.txt</code> to install the backend's dependencies. To install the test dependencies that are only required for testing and development purposes, run <code>pip install -r requirements-test.txt</code>.</p> <p>Next, run the following command to download the machine-learning model for the use case: <code>./download_models.sh my_model</code>.</p> <p>To check that everything works as expected, run <code>pytest tests/</code> to execute the unit test suite.</p>"},{"location":"docs/user-guide/dev-setup/#whats-next","title":"What's next?","text":"<p>TODO</p>"},{"location":"docs/user-guide/getting-started/","title":"Getting started","text":"<p>This guide describes how to download the source code, launch your very own XAI Demonstrator instance, and make a first change.</p>"},{"location":"docs/user-guide/getting-started/#get-the-source-code","title":"Get the source code","text":"<p>If you just want to quickly try out the XAI Demonstrator and do not have Git installed, you can simply download the source code as a ZIP file, unpack the file on your computer, and skip to the next section.</p> <p>However, if you plan to contribute to the XAI Demonstrator project and perhaps even develop your own uses cases, it makes sense to retrieve the source code using Git. Git is a so-called version control system that keeps track of all the changes that are made and enables teams to work on the same piece of software without making a mess.</p> <p>Don't worry if you've never used Git before. Throughout this user guide, we'll show you all the commands you need in detail.</p> <p>Installing Git</p> <p>To install Git, see the instructions here.</p> <p>Configuring Git on Windows</p> <p>Windows uses a different method to mark line endings in text files. To avoid issues, please run the following command to configure Git prior to running <code>git clone</code> to keep the original line endings:</p> <pre><code>git config --global core.autocrlf false\n</code></pre> <p>If this is not configured correctly, shell scripts that are copied into the Docker images will have Windows-style line endings and  cannot be executed in the Linux environments of the images. For more information, see this post on Unix StackExchange.</p> <p>To download (\"check out\") the XAI Demonstrator source code from GitHub, open a terminal (on Windows, we recommend the Git Bash that ships with Git), navigate to the folder you'd like to store the source code in, and run the following Git command:</p> <pre><code>git clone https://github.com/xai-demonstrator/xai-demonstrator.git\n</code></pre> <p>After a couple of seconds, you'll find  the entire XAI Demonstrator source code in a new folder called <code>xai-demonstrator</code>.</p>"},{"location":"docs/user-guide/getting-started/#install-docker","title":"Install Docker","text":"<p>All parts of the XAI Demonstrator are packaged and run as Docker containers. These are best thought of as self-contained units that contain all required dependencies and runtimes.</p> <p>Docker containers and images</p> <p>Readers familar with Docker terminology might note and perhaps object to our use of the term \"container\" to refer to both the \"Docker image\" and the \"Docker container\".</p> <p>This is not an oversight, but an intentional simplification. We will distinguish between the two when it becomes necessary later.</p> <p>To run the XAI Demonstrator or individual use cases locally on your computer, you need to install Docker (but nothing else). Docker is available for all common operating systems. See the instructions in the Docker documentation to learn how to install Docker Engine on your computer. Make sure you install the <code>docker-compose</code> utility as well.</p>"},{"location":"docs/user-guide/getting-started/#run-your-very-own-xai-demonstrator-instance","title":"Run your very own XAI Demonstrator instance","text":"<p>To launch the full XAI Demonstrator, you can use the <code>test-local</code> deployment  configuration. To launch this most minimal version, run the following commands in a terminal (again, if you're on Windows, we recommend you use the Git Bash that ships with Git):</p> <pre><code>cd xai-demonstrator/deployment/test-local\ndocker-compose up\n</code></pre> <p>Download size</p> <p>This will download several GB of files from the GitHub Container Registry!</p> <p>Permissions</p> <p>Depending on your operating system and the precise configuration of your Docker installation, you might need to execute <code>docker-compose up</code> with \"super user\" (MacOS and Linux) or \"administrator\" (Windows) privileges.   </p> <p>After the downloads complete and the containers are spun up, you can visit your very own XAI Demonstrator at http://localhost:8000/.</p> <p>To launch this instance of the XAI Demonstrator, we used only a very small part of the source code: The file <code>deployment/test-local/docker-compose.yml</code>. It instructs the Docker Engine to download and launch several containers (four at the time of writing) that together comprise the XAI Demonstrator.</p> <p>The <code>test-local</code> deployment configuration utilizes pre-built containers. While this is great for quickly launching the XAI Demonstrator, if we want to make changes to the code and test it, we need to build our own containers from the source code stored locally on our computer.</p> <p>As we'll see in the next section, this is not much more involved than what we did so far. For now, terminate the XAI Demonstrator instance. In most terminals, this is accomplished by pressing Ctrl + C (or Cmd + C on Macs).</p>"},{"location":"docs/user-guide/getting-started/#run-a-single-use-case","title":"Run a single use case","text":"<p>The core components of the XAI Demonstrator are its use cases. Each use case illustrates and demonstrates an XAI concept or method.</p> <p>By design, the use cases are self-contained. On the one hand, this gives developers a lot of freedom in selecting, e.g., machine-learning models and XAI libraries. On the other hand, it means that we can launch a use case as a standalone instance.</p> <p>To do this, navigate to a use case's main directory (in this guide, we'll work with the Visual Inspection use case):</p> <pre><code>cd xai-demonstrator/visual-inspection\n</code></pre> <p>Next, we will instruct Docker to assemble a new container from the files  in the current directory (<code>.</code>) and store it under the name <code>visual-inspection-service</code>:</p> <pre><code>docker build -t visual-inspection-service .\n</code></pre> <p>Download size</p> <p>This will download potentially several GB of files from different package repositories!</p> <p>While waiting for the command to complete, you can take a look at the <code>Dockerfile</code>. (We'll dive into the details of this file later, so don't if at first sight it appears to be very complicated.)</p> <p>When you scroll through the file, you can see that Docker is instructed to <code>COPY</code> source code from the <code>inspection-frontend</code> and <code>inspection-backend</code>. You might also recognize some of the commands like <code>pip</code>, <code>npm</code>, or <code>apt-get</code> that are used to  install the software dependencies required to run the use case.</p> <p>Once <code>docker build</code> completes, you can launch the container:</p> <pre><code>docker run -p 8000:8000 visual-inspection-service\n</code></pre> <p>If you now visit http://localhost:8000/, you will  directly see the frontend for the Visual Inspection use case. (You might have to wait for a couple of seconds until the connection can be established.)</p> <p>This instance of the use case should behave the same as the instance you launched using the <code>test-local</code> deployment configuration: Both are based on the latest version of the source code. The only difference is that instead of using a  container that was built on GitHub, you built it yourself on your own computer.</p> <p>Let's change that! Terminate the Visual Inspection instance by pressing Ctrl + C (or Cmd + C on Macs) in the terminal.</p>"},{"location":"docs/user-guide/getting-started/#modify-a-use-case","title":"Modify a use case","text":"<p>To see how quickly changes can be made and be tested, we will slightly modify the user interface. Of course, making more impactful changes or creating new use cases will involve significantly more effort and steps, which we will dive into in later parts of this user guide.</p> <p>For now, we will navigate to the file <code>visual-inspection/inspection-frontend/src/compoents/ExplainInspection.vue</code> and open it with a text editor.</p> <p>You will find that a <code>&lt;button&gt;</code> is defined within the first lines of the file. That's the button that users click to request an explanation for the machine learning model's classification of the object in the selected part of the image.</p> <p>Find the text on the button and modify it. As long as you make sure to not delete the angle brackets that surround it, there's nothing that can really go wrong. (The worst that can happen is that you make the text so long that the layout looks funky.)</p> <p>At the time of writing, the relevant parts of the code looked like: <pre><code>      &lt;button class=\"xd-button xd-secondary\"\nv-show=\"!waitingForExplanation\"\nv-bind:disabled=\"!predictionReady\"\nv-on:click=\"buttonClicked\"&gt;\n        Woran erkennst du das?\n      &lt;/button&gt;\n</code></pre></p> <p>And we might change it to an English translation: <pre><code>      &lt;button class=\"xd-button xd-secondary\"\nv-show=\"!waitingForExplanation\"\nv-bind:disabled=\"!predictionReady\"\nv-on:click=\"buttonClicked\"&gt;\n        What makes you think so?\n      &lt;/button&gt;\n</code></pre></p> <p>Once you've changed the line, you can repeat the steps that build and launch the container from the previous section: <pre><code>docker build -t visual-inspection-service .\ndocker run -p 8000:8000 visual-inspection-service\n</code></pre></p> <p>Once that's done, head to http://localhost:8000/ and check that the text on the button has indeed changed.</p>"},{"location":"docs/user-guide/getting-started/#whats-next","title":"What's next?","text":"<p>Congratulations! You have not only set up everything that's necessary to run your very own XAI Demonstrator, but already made changes to the source code of a use case and tested the results.</p> <p>In the next part of the user guide, we will set up your local development environment. That will equip you with all the tools you need to conveniently make changes to individual components of the XAI Demonstrator and develop your own use cases.</p>"},{"location":"docs/user-guide/use-cases/","title":"Creating use cases","text":"<p>The XAI Demonstrator comprises a collection of fully independent use cases. Each use case aims to illustrate a particular application of Explainable AI (XAI) methods.</p> <p>On this page, we show you how to add another use case. In the process, we discuss some of our fundamental design considerations and give an overview of the architecture. </p>"},{"location":"docs/user-guide/use-cases/#what-is-a-use-case","title":"What is a \"use case\"?","text":"<p>On a technical level, each use case consists of a user interface (frontend) paired with a stateless microservice (backend).</p> <p>The frontend is a single-page web application (SPA) that the users interact with on their smartphone. While the frontend is arguably the component most challenging to design, from a technical perspective, it's a fairly standard and lightweight web app.</p> <p>The backend, on the other hand, is where the AI predictions and corresponding explanations are generated. (Throughout this guide, we will assume that \"the AI\" is some sort of machine-learning model.  In line with most common machine-learning frameworks, we will refer to all model outputs \"predictions\".)</p> <p>The backend provides an HTTP-API that the frontend calls to request and receive predictions and explanations. From a technical point of view, the frontend (that runs in the users' web browser) and the backend (which is hosted on a server somewhere \"on the internet\") are two separate entities. Indeed, in the more advanced deployment configurations of the XAI Demonstrator, the two are usually not provided through the same service.</p> <p>In this guide, however, we will take a designer's perspective and consider a use case as a unit.</p> <p>A note on code organization \ud83d\udca1</p> <p>The entire code for the XAI Demonstrator lives in one single Git repository, a so-called monorepo. Hence, you can just clone the repository and are good to go.</p> <p>Compared to the perhaps more traditional approach of keeping each use case in a separate repository,  a monorepo might at first seem daunting and overly complex.</p> <p>However, especially when working with a team of varying levels of experience (like ours), you will probably soon see how convenient it is to keep all the code in one place.</p> <p>Everyone can immediately see where changes have been made and how the different components relate to each other. It is also straightforward to deploy the XAI Demonstrator to your local machine or some cloud infrastructure, as all the required scripts and configuration files live in the monorepo as well.</p> <p>To learn more about why we chose this approach and what goes on behind the scenes, see this tech note.</p>"},{"location":"docs/user-guide/use-cases/#adding-a-use-case","title":"Adding a use case","text":"<p>Each use case is self-contained and resides in its own top-level directory. This directory contains the code for the backend and the frontend and the instructions on how to combine the two.</p> <p>In the case that a use case builds on a custom machine learning model, the code describing its training finds its place in the use case's directory as well.</p> <p>Thus, the first step in adding a use case is to create a new directory at the root of the repository. All XAI Demonstrator use cases adhere to the following basic structure and naming convention, which we recommend you follow as well: <pre><code>use-case/\n|\n|- case-backend/  # (1)\n|  |- case/\n|  |  |- __init__.py\n|  |  |- main.py\n|  |\n|  |- requirements.txt\n|      \n|- case-frontend/  # (2)\n|  |- src/\n|  |  |- App.vue\n|  |\n|  |- package.json\n|     \n|- Dockerfile  # (3)\n|- README.md \n</code></pre> The most important elements, which we will instantiate in the following, are: 1. A microservice built with FastAPI (the backend). 2. A VueJS single-page application (the frontend). 3. A Dockerfile that describes how to assemble backend and frontend into a single container.</p> <p>A note on the XAI Demonstrator's tech stack \ud83d\udca1</p> <p>The XAI Demonstrator use case backends are FastAPI microservices, while the frontends are VueJS single-page applications. Both frameworks are not only versatile and convenient, but are beginner-friendly choices.</p> <p>In principle, you can choose whatever programming language and framework you like for your use cases. As long as you provide a Docker container with an HTTP API and a corresponding web frontend, you're good to go.</p> <p>However, to fully benefit from the infrastructure and utilities the XAI Demonstrator provides, we recommend you stay as close to its original tech stack as possible.</p> <p>To learn more about how and why we selected these frameworks, see this tech note.</p>"},{"location":"docs/user-guide/use-cases/#create-the-backend-microservice","title":"Create the backend microservice","text":"<p>Use case backends should be stateless</p> <p>All XAI Demonstrator backends are stateless. In other words, each call to their API is self-contained: The response to a request does not depend on information from previous requests.</p> <p>This is an established approach to designing microservices that makes their development, testing, and monitoring straightforward.</p> <p>Further, it allows us to run multiple instances of the backends in parallel  and distribute the frontends' calls among them. In particular, it enables us to deploy the XAI Demonstrator to a serverless infrastructure. (Don't worry if at this point you have no idea what that means.)</p> <p>We strongly recommend that you design your backends to be stateless as well.</p>"},{"location":"docs/user-guide/use-cases/#create-the-frontend","title":"Create the frontend","text":"<p>Serving the frontend</p> <p>To be able to operate a use case on its own, in addition to delivering predictions and explanations, the backend needs to deliver the frontend to the user's browser.</p> <p>The <code>xaidemo</code> package provides a helper function that generates the necessary routes:</p> <pre><code>from xaidemo.routers import vue_frontend\n\napp = FastAPI()\napp.include_router(vue_frontend(__file__))\n</code></pre> <p>Note that this requires ... . See the next section.</p>"},{"location":"docs/user-guide/use-cases/#assemble-the-use-case","title":"Assemble the use case","text":"<p>All of this can be described in a single Dockerfile, which :</p> <pre><code># FIRST STAGE\nFROM node:12-alpine as builder\nWORKDIR /\n# Copy the frontend code into the container\nCOPY ./case-frontend/ .\n\n# Install frontend dependencies and build the frontend\nRUN npm install &amp;&amp; npm run build\n\n# SECOND STAGE\nFROM python:3.8-slim\nWORKDIR /\n# Copy the backend code\nCOPY case-backend/case /case\n\n# Install all Python dependencies\nCOPY case-backend/requirements.txt /requirements.txt\nRUN pip install --upgrade pip\nRUN pip install -r /requirements.txt \\\n&amp;&amp; rm -rf /root/.cache/pip\n\n# Copy the frontend from the first stage\nRUN mkdir /case/static\nCOPY --from=builder /dist/ /case/static/\n\n# Launch backend service\nCMD [\"uvicorn\", \"case.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n</code></pre> <p>With this Docker file, the use case can be built and started: <pre><code>cd use-case\ndocker run\n</code></pre></p>"},{"location":"docs/user-guide/use-cases/#whats-next","title":"What's next?","text":""},{"location":"experiment-tracker/","title":"Experiment tracking","text":"<p>One purpose of the XAI Demonstrator is to serve as a platform for academic research and user testing. Thus, it includes the facilities to record data for later analysis.</p> <p>As this is the setting the XAI Demonstrator was developed for, we assume that it is embedded into a web-based experimentation platform such as oTree. You will not necessarily have to spin up your own XAI Demonstrator instance, but you will need to deploy additional services along with your experiment platform to record and collect the data.</p>"},{"location":"experiment-tracker/#how-do-i-record-data","title":"How do I record data?","text":"<p>To track the requests to and responses of any XAI Demonstrator use case, you can route the requests through an instance of the <code>experiment-proxy</code> service. This has the benefit that you do not need to make any changes to the use case or its configuration. See here for instructions on how to set up and configure an  <code>experiment-proxy</code> instance. For a large number of experiment settings, this is more than sufficient.</p> <p>If you would like to record additional data that is not part of the request or the response,  you can use the <code>record_data()</code> function provided by the <code>xaidemo</code> utilities package that is a default dependency of all XAI Demonstrator use cases:</p> <p><pre><code>from xaidemo.tracking.record import record_data\ndef some_function_that_is_called_within_the_use_case(important_value):\nrecord_data(key=\"internal_state\", value={\"value\": important_value})\n</code></pre> You will find this data within the record under <code>data[key]</code> along with some metadata. Please see here for more detailed information.</p> <p>Note that you must set <code>EXPERIMENT=1</code> on the use case instance that you use for your experiment and instrument the FastAPI app to actually record any data:</p> <pre><code>from xaidemo import tracking\napp = FastAPI(...)\ntracking.instrument_app(app)\n</code></pre> <p>You also need to configure the <code>COLLECTOR_URL</code> environment variable. For further information, including a more detailed example, see here.</p>"},{"location":"experiment-tracker/#how-do-i-collect-and-access-the-recorded-data","title":"How do I collect and access the recorded data?","text":"<p>The <code>data-collector</code> service receives the data and stores it as records in a database. It isn't deployed along with the regular XAI Demonstrator deployments, but you will have to set up your own instance. For more information, see here.</p> <p>All data that stems from the same original request will be stored as a single record with a unique ID. Usually, XAI Demonstrator backends return some kind of ID in their responses (e.g., a <code>prediction_id</code> or <code>explanation_id</code>) that can be used to later identify the associated record. That's probably the easiest option in most circumstances. Note that the IDs generated by the use cases are not the record ID. Instead, you need to search for it in the data collected by the <code>experiment-proxy</code> that is stored under <code>record[data][\"tracked\"]</code>. For more information, see here.</p>"},{"location":"experiment-tracker/#alternative-for-advanced-users","title":"Alternative for advanced users","text":"<p>If you're familiar with OpenTelemetry, you can instrument your experiment code as well as the HTTP client you use to make requests to the XAI Demonstrator to pass along an OpenTelemetry context. The record ID is derived from the context information, and you can obtain it as follows from within the context:</p> <pre><code>from xaidemo.tracking.record import get_record_id\nrecord_id = get_record_id()\n</code></pre> <p>This allows you to immediately know the record ID, even before making any calls. You can find an example in <code>experiment-tracker/tests/integration/test_end_to_end.py</code>.</p> <p>Please note that it is not sufficient to initiate a new span but that you need to initiate a new context for each request. If that sounds very confusing, we suggest you use the method described above to retrospectively find the record ID to avoid issues during data collection.</p>"},{"location":"experiment-tracker/#see-it-in-action-by-running-the-integration-tests","title":"See it in action by running the integration tests","text":"<p>Spin up the local version with a dummy use case: <pre><code>cd experiment-tracker\ndocker-compose --env-file .env.test up\n</code></pre></p> <p>Then, you can run the integration tests: <pre><code>cd tests\n./run.sh\n</code></pre></p> <p><code>experiment-tracker/docker-compose.yml</code> shows how to set the environment variables for each of the involved services. The tests in <code>experiment-tracker/tests/integration</code> document common scenarios and show how data is recorded, transmitted, stored, and retrieved.</p>"},{"location":"experiment-tracker/#is-this-reliable-will-it-affect-the-performance-of-the-use-case","title":"Is this reliable? Will it affect the performance of the use case?","text":"<p>In principle, recording the data is reliable. We have taken care to surface any issues (such as attempts to store data that is not JSON-serializable) as early as possible so that any issues most likely be discovered while setting up an experiment.</p> <p>However, since the data is transferred to the collector only after the response has been returned and plenty of things can go wrong when transmitting data across a network, there is no guarantee that all data sent out is actually recorded.</p> <p>For the same reason, recording data should only have a minimal performance impact: Both the <code>experiment-proxy</code> and instrumented use cases only send out data after the response has been returned to the user. This is by far the  most time-consuming part. The overhead while servicing a request is kept to a minimum and should be negligible compared to the computations performed by XAI Demonstrator use cases.</p>"},{"location":"experiment-tracker/#how-does-it-work","title":"How does it work?","text":"<p>The experiment tracking capabilities are provided by the  <code>xaidemo.tracking</code> package in combination with the two services <code>experiment-proxy</code> and <code>data-collector</code> described above.</p> <p>Both the proxy and the data collector are built on FastAPI (similar to the XAI Demonstrator use cases but with much less code) and are best understood by having a look at the source code.</p> <p><code>xaidemo.tracking</code>'s <code>instrument_app()</code> adds a middleware to a FastAPI application that makes sure that all the data recorded during a request is sent to the data collector after the response has been sent.</p> <p>Under the hood, the XAI Demonstrator's experiment tracking is built on</p> <ul> <li>OpenTelemetry for context management</li> <li><code>aiohttp</code> to handle the requests between services (via <code>xaidemo.http_client</code>)</li> <li>Apache CouchDB for data storage</li> </ul>"},{"location":"experiment-tracker/data-collector/","title":"Experiment Data Collector","text":""},{"location":"experiment-tracker/experiment-proxy/","title":"experiment-proxy","text":"<p>A proxy that records requests to use cases and their responses.</p>"},{"location":"guess-the-country/","title":"Guess the Country","text":""},{"location":"review-sentiment/","title":"Customer Review Sentiment Analysis","text":"Build Backend Frontend"},{"location":"review-sentiment/#components","title":"Components","text":"<ul> <li>Multilingual sentiment analysis provided by NLPTown's bert-base-multilingual-uncased-sentiment model</li> <li>Explanations generated via Facebook's Captum library</li> <li>Backend microservice built with FastAPI</li> <li>Frontend created with VueJS</li> </ul>"},{"location":"review-sentiment/#running-the-service-locally-with-docker","title":"Running the service locally (with Docker)","text":"<p>To launch a standalone instance of the service:</p> <pre><code>cd review-sentiment\ndocker-compose up\n</code></pre>"},{"location":"review-sentiment/#running-the-service-locally-without-docker","title":"Running the service locally (without Docker)","text":"<p>During development, it can be desirable to launch the service directly and not as a Docker container. For instance, this allows to get rapid feedback on changes to the backend code.</p> <pre><code>cd review-sentiment\n./build_frontend.sh\ncd sentiment-backend\nuvicorn sentiment.main:app\n</code></pre>"},{"location":"review-sentiment/#gpu-acceleration-with-cuda","title":"GPU Acceleration with CUDA","text":"<ul> <li>The sentiment service can be run with GPU acceleration using Pytorch's CUDA package.</li> <li>In order to enable GPU support use <code>docker build -f Dockerfile_CUDA .</code> to build the Docker image from CUDA_Dockerfile. Launch a container from this image with <code>docker run -p 80:8000 --gpus all *image ID*</code>. The flags are required to expose the container port 8000 (where the service is listening) to machine port 80 (where HTTP requests are coming in) and to grant the container access to the GPU.</li> <li>There are compatibility conditions which need to be satisfied for CUDA to work.</li> <li>CUDA requires the installation of NVIDIA drivers. The drivers have to be supported by the utilized CUDA version. An overview of the minimum driver required for a specific version of CUDA can be found here.</li> <li>The PyTorch version has to be compatible with the CUDA version. A list of previous PyTorch versions, their supported CUDA versions and download instructions can be found here.</li> <li>The configuration has been tested using GCP's \"GPU Optimized Debian m32 (with CUDA 10.0)\" image (specifications: NVIDIA driver version 410.104, CUDA 10.0 and PyTorch 1.4.0).</li> </ul>"},{"location":"visual-inspection/","title":"Visual Explanations","text":"Build Backend Frontend"},{"location":"visual-inspection/#components","title":"Components","text":"<ul> <li>Predictions are provided by a MobileNetV2 model   pre-trained on ImageNet and fine-tuned on task-specific samples</li> <li>Backend microservice built with FastAPI</li> <li>Frontend created with VueJS utilizing the Advanced Cropper component</li> </ul>"},{"location":"visual-inspection/#environment-variables","title":"Environment Variables","text":"Variable Description Default Value <code>SERVICE_NAME</code> The name that the app uses as its identifier, e.g. when logging or emitting traces <code>\"inspection-service\"</code> <code>ROOT_PATH</code> FastAPI root path (doc) <code>\"\"</code> <code>PATH_PREFIX</code> FastAPI router prefix (doc) <code>\"\"</code> <code>DEFAULT_EXPLAINER</code> The explanation generator to use if a request does not speficy one <code>\"lime\"</code> <code>LOG_INPUT</code> Save input images to disk <code>False</code> <code>LOG_PATH</code> Path to store the logged images <code>./log</code>"},{"location":"visual-inspection/#running-the-service-locally-with-docker","title":"Running the service locally (with Docker)","text":"<p>To launch a standalone instance of the service:</p> <pre><code>cd visual-inspection\ndocker-compose up\n</code></pre>"},{"location":"visual-inspection/#running-the-service-locally-without-docker","title":"Running the service locally (without Docker)","text":"<p>During development, it can be desirable to launch the service directly and not as a Docker container. For instance, this allows to get rapid feedback on changes to the backend code.</p> <pre><code>cd visual-inspection\n./build_frontend.sh\ncd inspection-backend\nuvicorn inspection.main:app\n</code></pre>"},{"location":"visual-inspection/#log-input-images","title":"Log input images","text":"<p>For development purposes, the service can be configured to write the raw input images to disk. This setting is controlled through the environment variable <code>LOG_INPUT</code>: <pre><code>export LOG_INPUT=1\n</code></pre></p> <p>By default, the images are collected in a sub-folder <code>./log</code>. To change where the images are saved to, set the environment variable <code>LOG_PATH</code>, e.g.: <pre><code>export LOG_PATH=/home/myusername/log\n</code></pre></p>"}]}